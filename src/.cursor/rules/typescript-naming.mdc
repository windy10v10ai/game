---
description: TypeScript命名规范 - 适用于src目录的所有TypeScript文件
globs: ["**/*.ts", "**/*.tsx"]
alwaysApply: true
---

# TypeScript 代码规范 - 适用于 src 目录

## 命名规范

### 1. 静态方法 (Static Methods)

- **规则**: 使用 PascalCase (首字母大写)
- **示例**:
  ```typescript
  static GetItemsMap(hero: CDOTA_BaseNPC_Hero): Map<string, CDOTA_Item> { }
  static SellExtraItems(hero: CDOTA_BaseNPC_Hero): boolean { }
  static GetSellThreshold(itemsMap: Map<string, CDOTA_Item>): number { }
  ```

### 2. 导出常量 (Exported Constants)

- **规则**: 使用 PascalCase (首字母大写)
- **示例**:
  ```typescript
  export const AghanimsShardItem = "item_aghanims_shard";
  export const SpecialConsumableItems: string[] = [];
  export const SellItemCommonList: string[] = [];
  ```

### 3. 类名 (Class Names)

- **规则**: 使用 PascalCase (首字母大写)
- **示例**:
  ```typescript
  export class SellItem {}
  export class HeroAI {}
  ```

### 4. 接口名 (Interface Names)

- **规则**: 使用 PascalCase (首字母大写)
- **示例**:
  ```typescript
  interface LotteryStatus {}
  interface GameConfig {}
  ```

### 5. 实例方法 (Instance Methods)

- **规则**: 使用 camelCase (首字母小写)
- **示例**:
  ```typescript
  public updateStatus(): void { }
  private calculateDamage(): number { }
  ```

### 6. 变量和参数 (Variables & Parameters)

- **规则**: 使用 camelCase (首字母小写)
- **示例**:
  ```typescript
  const itemsMap = new Map<string, CDOTA_Item>();
  const sellThreshold = 7;
  function processHero(hero: CDOTA_BaseNPC_Hero, itemName: string): boolean {}
  ```

### 7. 文件名 (File Names)

- **规则**: 使用 kebab-case (小写字母+连字符)
- **示例**:
  ```
  sell-item.ts
  sell-item-config.ts
  hero-base.ts
  ```

## 代码风格

### 1. 导入语句格式

```typescript
// 多个导入时使用多行格式
import {
  AghanimsShardItem,
  SellItemCommonList,
  SellItemHeroList,
  SpecialConsumableItems,
} from "./sell-item-config";
```

### 2. 函数参数格式

```typescript
// 参数过多时使用多行格式
static SellHeroSpecificItems(
  hero: CDOTA_BaseNPC_Hero,
  itemsMap: Map<string, CDOTA_Item>,
): boolean {
  // 实现代码
}
```

### 3. 注释规范

```typescript
/**
 * 方法描述 - 简短说明功能
 * @param hero 英雄单位
 * @param itemsMap 物品Map
 * @returns 是否成功出售
 */
static SellExtraItems(hero: CDOTA_BaseNPC_Hero): boolean {
  // 实现代码
}
```

## 项目特定规则

### 1. AI 相关类

- 所有 AI 类的静态方法必须使用 PascalCase
- AI 类名以功能为前缀: `SellItem`, `BuildItem`, `HeroAI`

### 2. 配置文件

- 配置常量使用 PascalCase
- 配置文件以 `-config.ts` 结尾
- 所有配置项必须有注释说明用途

### 3. 物品相关

- 物品名称常量使用 PascalCase
- 物品名称值保持 Dota 2 原始格式 (snake_case)

### 4. 类型定义

- 自定义类型使用 PascalCase
- 泛型参数使用单个大写字母: `T`, `K`, `V`

## 强制执行规则

这些规则在以下情况下必须严格遵守:

- 新建文件时
- 重构代码时
- 代码审查时
- 添加新功能时
