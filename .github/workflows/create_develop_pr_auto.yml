name: Create develop PR auto
on:
  push:

jobs:
  condition_check:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.check_condition.outputs.proceed }}
    steps:
      - name: Check if PR exists
        id: check_pr
        run: |
          pr_exists=$(gh pr list --base main --head develop --json number -q '.[0].number')
          echo pr_exists=$pr_exists >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check branch not main or develop
        id: check_branch
        run: |
          branch=$(echo ${GITHUB_REF#refs/heads/})
          if [ $branch = "main" ] || [ $branch = "develop" ]; then
            echo "branch_ok=false" >> $GITHUB_OUTPUT
          else
            echo "branch_ok=true" >> $GITHUB_OUTPUT
          fi

      - name: Check branch
        id: check_condition
        run: |
          if [ ${{ steps.check_pr.outputs.pr_exists }} = "null" ] && [ ${{ steps.check_branch.outputs.branch_ok }} = "true" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi

  create_pull_request:
    needs: condition_check
    if: needs.condition_check.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: get_branch
        run: |
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_REF#refs/heads/}"

      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Reset promotion branch
        run: |
          git fetch origin ${{ steps.get_branch.outputs.branch }}:${{ steps.get_branch.outputs.branch }}
          git reset --hard ${{ steps.get_branch.outputs.branch }}

      - name: Get issue number from branch name
        id: get_issue
        run: echo number=$(echo ${GITHUB_REF#refs/heads/feature/} | cut -d'-' -f1) >> $GITHUB_OUTPUT

      - name: Fetch issue details
        id: fetch_issue
        run: |
          response=$(curl --request GET --url https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.get_issue.outputs.number }})
          title=$(echo "$response" | jq -r .title)
          if [ $title = "null" ]; then
            title=$(echo ${GITHUB_REF#refs/heads/})
          fi
          echo title=$title >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          title: ${{ steps.fetch_issue.outputs.title }}
          branch: ${{ steps.get_branch.outputs.branch }}
          base: develop
          reviewers: windybirth

      - name: Enable Pull Request Automerge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash
